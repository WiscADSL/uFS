
#ifndef CFS_INCLUDE_FSLIBLEASESHARED_H_
#define CFS_INCLUDE_FSLIBLEASESHARED_H_

#include <cassert>
#include <cstdint>
#include <queue>

#include "perfutil/Cycles.h"

constexpr bool gIsCCLeaseDbg = false;

class FsLeaseCommon {
 public:
  using rdtscmp_ts_t = uint64_t;
  constexpr static uint64_t kDefaultTermUs = 100000000;

  static FsLeaseCommon* getInstance();
  // NOTE: starTs and endTs must be generated by genTimestamp()
  bool checkIfLeaseExpire(rdtscmp_ts_t startTs, rdtscmp_ts_t endTs) {
    return PerfUtils::Cycles::toMicroseconds(endTs - startTs) > termUs_;
  }

  static rdtscmp_ts_t genTimestamp() { return PerfUtils::Cycles::rdtscp(); }

  void setTermUs(uint64_t term) { termUs_ = term; }

 private:
  static FsLeaseCommon* singleInstance;
  FsLeaseCommon() {}
  uint64_t termUs_{kDefaultTermUs};
};

class FreeList {
 private:
  static constexpr int min = 1;
  std::queue<int> free_items;
  int max;

 public:
  FreeList(int max) : max(max) {
    for (int i = min; i <= max; ++i) free_items.push(i);
  }

  int Pop() {
    if (free_items.empty()) assert(false);
    int temp = free_items.front();
    free_items.pop();
    return temp;
  }

  void Return(int item) {
    assert(item <= max);
    free_items.push(item);
  }
};

#endif  // CFS_INCLUDE_FSLIBLEASESHARED_H_
